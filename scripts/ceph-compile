#!/bin/bash

# Updating the submodules can cause failures
#set -e

function beforeBuild {
  # Make sure all packages are up to date
  zypper ref
  zypper update -y

  # Install all requirements to run tests
  cd /ceph/src/pybind/mgr/dashboard
  git fetch ceph
  git checkout ceph/master
  #pip2 install --ignore-installed -r requirements.txt
  pip install --ignore-installed -r requirements.txt

  cd /ceph
  find . -name \*.pyc -delete
  ./install-deps.sh

  # SSO dependencies
  # (install-deps.sh has to be run before)
  pip install python3-saml
  #pip2 install python-saml
  git submodule update -f --recursive --remote
  git submodule update -f --recursive --init
}

function compileCeph {
  cd /ceph
  #ARGS="-DWITH_PYTHON3=ON -DWITH_PYTHON2=OFF -DMGR_PYTHON_VERSION=3 -DWITH_RADOSGW_AMQP_ENDPOINT=OFF -DENABLE_GIT_VERSION=OFF -DWITH_TESTS=ON -DWITH_CCACHE=ON $ARGS"
  ARGS="-DENABLE_GIT_VERSION=OFF -DWITH_TESTS=ON -DWITH_CCACHE=ON $ARGS"
  ARGS="-DWITH_PYTHON3=ON -DWITH_PYTHON2=OFF -DMGR_PYTHON_VERSION=3 -DWITH_RADOSGW_AMQP_ENDPOINT=OFF $ARGS"

  #Only if python3 stops working
  #ARGS="-D WITH_PYTHON3=ON -D WITH_TESTS=ON -D WITH_CCACHE=ON -D ENABLE_GIT_VERSION=OFF WITH_MGR_DASHBOARD_FRONTEND=OFF $ARGS"

  NPROC=${NPROC:-$(nproc --ignore=2)}

  if [ "$MIMIC" == "true" ]; then
      rm /usr/bin/gcc
      rm /usr/bin/g++

      ln -s /usr/bin/gcc-7 /usr/bin/gcc
      ln -s /usr/bin/g++-7 /usr/bin/g++
  fi

  if [ -d "build" ]; then
      cd build
      cmake -DBOOST_J=$NPROC $ARGS ..
  else
      ./do_cmake.sh $ARGS
      cd build
  fi

  ccache make -j$NPROC
}

function createTestEnvironments {
  setupVirtualenv=/ceph/src/tools/setup-virtualenv.sh
  cd /ceph/src/pybind/mgr
  $setupVirtualenv /ceph/build/mgr-virtualenv
  cd dashboard
  $setupVirtualenv /ceph/build/mgr-dashboard-virtualenv
  # For debugging
  pip install pydevd-pycharm~=191.6605.12
}

# Use all functions to compile ceph

beforeBuild
compileCeph
createTestEnvironments
